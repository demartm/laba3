section .text

%macro pr 2
mov ecx,%1
mov edx,%2
call print
%endmacro

global _start

_start:
mov eax,3
mov ebx,0
mov ecx,values
mov edx,val_len
int 80h

pr msg,len
pr values,val_len

mov al,[n]
call compare
mov al,[m]
call compare

mov al,[n]
cmp al,'1'
jle printdata
mov al,[m]
cmp al,'1'
je printdata
cmp al,'0'
je .zero_deg
jmp .continue
.zero_deg:
mov byte [n],'1'
jmp printdata


.continue:
sub byte [n],48
sub byte [m],48
mov dl,1
mov al,[n]
mov [buffer],al
mov byte [n],0
mov bl,al

cycle:
cmp dl,[m]
je finalCheck
mov al,0
inc dl

.subcycle:
cmp al,[buffer]
je cycle
add byte [n],bl
inc al
jmp .subcycle

finalCheck:
mov al,[n]
cmp al,9
jg .error
add byte [n],48
jmp printdata
.error:
pr ir_error,ir_len
jmp exit

printdata:
pr result,res_len
pr n,1
jmp exit




compare:
cmp al,48
jl .error
cmp al,57
jg .error
ret
.error:
pr im_error,im_len
jmp exit


    print:
    mov     ebx, 1
    mov     eax, 4
    int     0x80
    ret

exit:
    mov     eax, 1
    mov ebx,0
    int     0x80
    

section .data
    msg db  "Enter 2 numbers: "
    len equ $ - msg
    im_error db  10,"Incorrect numbers!"
    im_len equ $ - im_error
    ir_error db  10,"Incorrect result!"
    ir_len equ $ - ir_error
    result db  10,"Result: "
    res_len equ $ - result
    values:
    n: times 2 db ' '
    m: times 2 db ' '
    val_len equ $-values
    buffer db 0
    
    
